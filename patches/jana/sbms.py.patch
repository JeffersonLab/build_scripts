<<<<<<< HEAD
--- sbms.py.original	2020-03-27 11:38:47.910624018 -0400
+++ sbms.py.patched	2020-03-27 11:56:28.324675578 -0400
@@ -516,13 +516,18 @@
 ##################################
 def AddCCDB(env):
 	ccdb_home = os.getenv('CCDB_HOME', 'none')
+	sqlite_home = os.getenv('SQLITE_HOME', 'none')
 	if(ccdb_home != 'none'):
 		CCDB_CPPPATH = "%s/include" % (ccdb_home)
 		CCDB_LIBPATH = "%s/lib" % (ccdb_home)
 		CCDB_LIBS = "ccdb"
+		SQLITE_LIBPATH = "%s/lib" % (sqlite_home)
+		SQLITE_LIBS = "sqlite3"
 		env.AppendUnique(CPPPATH = [CCDB_CPPPATH])
 		env.AppendUnique(LIBPATH = [CCDB_LIBPATH])
 		env.AppendUnique(LIBS    = [CCDB_LIBS])
+		env.AppendUnique(LIBS    = [SQLITE_LIBS])
+		env.AppendUnique(LIBS    = ['fmt'])
 
 
 ##################################
=======
--- sbms.py.original	2020-06-12 17:49:55.468018385 -0400
+++ sbms.py.patched	2020-06-19 21:28:36.714653683 -0400
@@ -212,13 +212,14 @@
 ##################################
 # AddCompileFlags
 ##################################
-def AddCompileFlags(env, allflags):
+def AddCompileFlags(env, allflags_in):
 
 	# The allflags parameter should be a string containing all
 	# of the link flags (e.g. what is returned by root-config --cflags)
 	# It is split on white space and the parameters sorted into
 	# the 2 lists: ccflags, cpppath
 
+	allflags = str(allflags_in, 'utf-8')
 	ccflags = []
 	cpppath = []
 	for f in allflags.split():
@@ -237,13 +238,14 @@
 ##################################
 # AddLinkFlags
 ##################################
-def AddLinkFlags(env, allflags):
+def AddLinkFlags(env, allflags_in):
 
 	# The allflags parameter should be a string containing all
 	# of the link flags (e.g. what is returned by root-config --glibs)
 	# It is split on white space and the parameters sorted into
 	# the 3 lists: linkflags, libpath, and libs
 
+	allflags = str(allflags_in, 'utf-8')
 	linkflags = []
 	libpath = []
 	libs = []
@@ -303,22 +305,22 @@
 	# the BMS_OSNAME will be passed in which almost certainly contains
 	# "."s. The Python module loader doesn't like these and we have to
 	# replace them with "-"s to appease it.
-
-	platform = re.sub('\.', '-', platform)
+	platform_this = str(platform)
+	platform = re.sub('\.', '-', platform_this)
 
 	modname = "sbms_%s" % platform
 	if (int(env['SHOWBUILD']) > 0):
-		print "looking for %s.py" % modname
+		print("looking for %s.py" % modname)
 	try:
 		InitENV = getattr(__import__(modname), "InitENV")
 
 		# Run the InitENV function (if found)
 		if(InitENV != None):
-			print "sbms : Applying settings for platform %s" % platform
+			print("sbms : Applying settings for platform %s" % platform)
 			InitENV(env)
 
-	except ImportError,e:
-		if (int(env['SHOWBUILD']) > 0): print "%s" % e
+	except ImportError as e:
+		if (int(env['SHOWBUILD']) > 0): print("%s" % e)
 		pass
 
 
@@ -385,19 +387,19 @@
 	ret = None
 	for opt in options:
 		myargs = opt.split()
-		if(env['SHOWBUILD'] >0):
-			print 'Test compiling %s:' % name
-			print args + myargs
+		if(int(env['SHOWBUILD']) >0):
+			print('Test compiling %s:' % name)
+			print(args + myargs)
 		res = subprocess.call(args + myargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
 		if res==0:
-			if(env['SHOWBUILD'] >0): print '---Succeeded'
+			if(int(env['SHOWBUILD']) >0): print('---Succeeded')
 			ret = myargs
 			break
 		else:
-			if(env['SHOWBUILD'] >1):
-				print '----Failed. Test file content was:------'
-				print subprocess.call(['cat', ifname])
-				print '----------------------------------------'
+			if(int(env['SHOWBUILD']) >1):
+				print('----Failed. Test file content was:------')
+				print(subprocess.call(['cat', ifname]))
+				print('----------------------------------------')
 				
 	
 	if os.path.exists(ifname): os.unlink(ifname);
@@ -613,7 +615,7 @@
 		elif os.path.exists(rootcintpath):
 			bld = SCons.Script.Builder(action = rootcintaction, suffix='_Dict.cc', src_suffix='.h')
 		else:
-			print 'Neither rootcint nor rootcling exists. Unable to create ROOT dictionaries if any encountered.'
+			print('Neither rootcint nor rootcling exists. Unable to create ROOT dictionaries if any encountered.')
 			return
 
 		env.Append(BUILDERS = {'ROOTDict' : bld})
@@ -630,13 +632,13 @@
 		curpath = os.getcwd()
 		srcpath = env.Dir('.').srcnode().abspath
 		if(int(env['SHOWBUILD'])>1):
-			print "---- Scanning for headers to generate ROOT dictionaries in: %s" % srcpath
+			print("---- Scanning for headers to generate ROOT dictionaries in: %s" % srcpath)
 		os.chdir(srcpath)
 		for f in glob.glob('*.[h|hh|hpp]'):
 			if 'ClassDef' in open(f).read():
 				env.AppendUnique(ALL_SOURCES = env.ROOTDict(f))
 				if(int(env['SHOWBUILD'])>1):
-					print "       ROOT dictionary for %s" % f
+					print("       ROOT dictionary for %s" % f)
 		os.chdir(curpath)
 
 
>>>>>>> master
